In Python, you can implement various design patterns using OOP principles. Here are some popular design patterns and how they can be used in Python:

Singleton Pattern:
The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance.

class Singleton:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Singleton, cls).__new__(cls)
        return cls._instance

# Usage:
s1 = Singleton()
s2 = Singleton()
assert s1 is s2  # Both variables refer to the same instance.

=====================================

Factory Pattern:
The Factory pattern provides an interface for creating objects without specifying their exact class.

class Product:
    def display(self):
        pass

class ProductA(Product):
    def display(self):
        print("Product A")

class ProductB(Product):
    def display(self):
        print("Product B")

class ProductFactory:
    def create_product(self, product_type):
        if product_type == "A":
            return ProductA()
        elif product_type == "B":
            return ProductB()
        else:
            raise ValueError("Invalid product type")

# Usage:
factory = ProductFactory()
product1 = factory.create_product("A")
product2 = factory.create_product("B")

===================================
Observer Pattern:
The Observer pattern allows objects (observers) to subscribe to changes in another object (subject) and get notified when the subject's state changes.
python


class Observer:
    def update(self, data):
        pass

class Subject:
    def __init__(self):
        self._observers = []

    def attach(self, observer):
        self._observers.append(observer)

    def detach(self, observer):
        self._observers.remove(observer)

    def notify(self, data):
        for observer in self._observers:
            observer.update(data)

# Usage:
class ConcreteObserver(Observer):
    def update(self, data):
        print("Received data:", data)

subject = Subject()
observer1 = ConcreteObserver()
observer2 = ConcreteObserver()

subject.attach(observer1)
subject.attach(observer2)

subject.notify("Some data")

=====================================
Strategy Pattern:
The Strategy pattern allows you to define a family of algorithms, encapsulate each one, and make them interchangeable.

class PaymentStrategy:
    def pay(self, amount):
        pass

class CreditCardPayment(PaymentStrategy):
    def pay(self, amount):
        print("Paid {} using Credit Card".format(amount))

class PayPalPayment(PaymentStrategy):
    def pay(self, amount):
        print("Paid {} using PayPal".format(amount))

class ShoppingCart:
    def __init__(self, payment_strategy):
        self._payment_strategy = payment_strategy

    def checkout(self, amount):
        self._payment_strategy.pay(amount)

# Usage:
credit_card_payment = CreditCardPayment()
paypal_payment = PayPalPayment()

cart1 = ShoppingCart(credit_card_payment)
cart1.checkout(100)

cart2 = ShoppingCart(paypal_payment)
cart2.checkout(200)


====================================================

Implementations of Python:-Automation using Python
==================================================
File Operations:

Python can be used to automate file operations, such as renaming, copying, moving, and deleting files.

import shutil
import os

# Copy a file
shutil.copy("source_file.txt", "destination_folder/")

# Move a file
shutil.move("source_file.txt", "destination_folder/")

# Delete a file
os.remove("file_to_delete.txt")

# Rename a file
os.rename("old_file_name.txt", "new_file_name.txt")

==========================================================

Web Scraping:
Python can be used to extract data from websites using web scraping libraries like BeautifulSoup and requests.

=========================================================
Email Automation:
Python can be used to send automated emails using the smtplib library.

=======================
Task Scheduling:
Python can be used to schedule and automate tasks using libraries like schedule or cron.
---------------------------
import schedule
import time

def task():
    print("Task is running...")

# Run the task every 1 hour
schedule.every(1).hour.do(task)

while True:
    schedule.run_pending()
    time.sleep(1)

==================================

Data Processing:
Python can be used to process and analyze large amounts of data efficiently using libraries like Pandas and NumPy.

===================================
GUI Automation:
Python can be used to automate repetitive tasks in GUI applications using libraries like pyautogui.

import pyautogui
import time

# Simulate mouse and keyboard actions
pyautogui.moveTo(100, 100, duration=0.5)
pyautogui.click()
pyautogui.typewrite("Hello, World!")


=================================

https://www.analyticsvidhya.com/blog/2023/04/python-automation-guide-automate-everything-with-python/

https://zapier.com/blog/python-automation/

https://www.freecodecamp.org/news/python-automation-scripts/
