
# example
print("Writing a function")

def Hello():
	print("Hello world")

print("Calling a function using function name")

Hello()

print("Function executed successfully")

--------------------------------------------------
# example
import logging

logging.debug("Writing a function")

def Hello():
	logging.debug("Hello world")

logging.debug("Calling a function using function name")

Hello()
logging.debug("Function executed successfully")


========================================================
import logging


# levels of logging in pyhton
#DEBUG
logging.debug('The debug message is displaying')
#INFO
logging.info('The info message is displaying')
#WARNING
logging.warning('The warning message is displaying')
#ERROR
logging.error('The error message is displaying')
#CRITICAL
logging.critical('The critical message is displaying')

===========================================================

#Basic Configurations

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

print("Code for Calculator")
a = 20
b = 5

Add_result = add(a,b)
print("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
print("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

--------------------------------------------------
import logging

logging.basicConfig(level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

=====================================================
#logging in a file
import logging


logging.basicConfig(filename='test.log',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

===============================================================

#Formatting the log message

import logging

#logging in a file

logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

==========================================================
# file: Sales.py

import logging

logging.basicConfig(filename='sales.log',level=logging.INFO,format='%(levelname)s : %(message)s')

def display():
    logging.info("This is display method from sales")

def Sales_rpt():
    logging.info("This is report from sales")

display()

Sales_rpt()

=============================================
# file Demo1.py
# log info from only 1 file is recorded..
import Sales
import logging

#logging in a file
#Formatting the log message
logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

Sales.display()


=================================================================
# file: Sales.py
# creating a logger object
import logging

# creating a logger object
logger = logging.getLogger(__name__)

# Note: when we create logger object use that object
# to log the info or details

logging.basicConfig(filename='sales.log',level=logging.INFO,format='%(levelname)s : %(message)s')

""" here still the basic Config will work as it follows he hierarchy"""

def display():
    logger.info("This is display method from sales")

def Sales_rpt():
    logger.info("This is report from sales")

display()

Sales_rpt()

====================================
# file Demo1.py

import Sales
import logging

#logging in a file
#Formatting the log message
logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.info("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.info("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

Sales.display()


=================================================

# file: Sales.py
# configure custom logger
import logging

# creating a logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# configuring file formatting
formatter = logging.Formatter('%(levelname)s : %(message)s')
#add the formatter to the file handler (just after file handler)

# to log the data in file we will configure fileHandler
file_handler = logging.FileHandler('Sales.log')
file_handler.setFormatter(formatter)

# we need to add file_handler to the logger
logger.addHandler(file_handler)

#logging.basicConfig(filename='sales.log',level=logging.INFO,format='%(levelname)s : %(message)s')


def display():
    logger.info("This is display method from sales")

def Sales_rpt():
    logger.info("This is report from sales")

display()

Sales_rpt()

==============================================
# file Demo1.py

import Sales
import logging

#logging in a file
#Formatting the log message
logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logging.info("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logging.info("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

Sales.display()

===============================================================
import Sales
import logging

# creating a logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# configuring file formatting
formatter = logging.Formatter('%(asctime)s:%(name)s: %(message)s')
#add the formatter to the file handler (just after file handler)

# to log the data in file we will configure fileHandler
file_handler = logging.FileHandler('test.log')
file_handler.setFormatter(formatter)

# we need to add file_handler to the logger
logger.addHandler(file_handler)
#Formatting the log message
logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

a = 20
b = 5

Add_result = add(a,b)
logger.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logger.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

Sales.display()


===================================================
# Logging  Error or Exception
import Sales
import logging

# creating a logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# configuring file formatting
formatter = logging.Formatter('%(asctime)s:%(name)s: %(message)s')
#add the formatter to the file handler (just after file handler)

# to log the data in file we will configure fileHandler
file_handler = logging.FileHandler('test.log')
file_handler.setFormatter(formatter)

# we need to add file_handler to the logger
logger.addHandler(file_handler)
#Formatting the log message
logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)

def add(a,b):
    return a+b

def sub(a,b):
    return a-b

def div(a,b):
    try:
        result = a/b
    except ZeroDivisionError:
        logger.error("Tried to divide by 0")
    else:
        return result

a = 20
b = 0
Div_result = div(a,b)
logger.debug("Divide: {} - {} is {} : ".format (a,b, Div_result))

Add_result = add(a,b)
logger.debug("Addition: {} + {} is {} : ".format (a,b, Add_result))

Sub_result = sub(a,b)
logger.debug("Subtraction: {} - {} is {} : ".format (a,b, Sub_result))

Sales.display()

==================================









